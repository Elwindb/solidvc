"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizationResponse = void 0;
const authorization_request_1 = require("../authorization-request");
const Opts_1 = require("../authorization-request/Opts");
const id_token_1 = require("../id-token");
const types_1 = require("../types");
const OpenID4VP_1 = require("./OpenID4VP");
const Opts_2 = require("./Opts");
const Payload_1 = require("./Payload");
class AuthorizationResponse {
    constructor({ authorizationResponsePayload, idToken, responseOpts, authorizationRequest, }) {
        this._authorizationRequest = authorizationRequest;
        this._options = responseOpts;
        this._idToken = idToken;
        this._payload = authorizationResponsePayload;
    }
    /**
     * Creates a SIOP Response Object
     *
     * @param requestObject
     * @param responseOpts
     * @param verifyOpts
     */
    static fromRequestObject(requestObject, responseOpts, verifyOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, Opts_1.assertValidVerifyAuthorizationRequestOpts)(verifyOpts);
            (0, Opts_2.assertValidResponseOpts)(responseOpts);
            if (!requestObject || !requestObject.startsWith('ey')) {
                throw new Error(types_1.SIOPErrors.NO_JWT);
            }
            const authorizationRequest = yield authorization_request_1.AuthorizationRequest.fromUriOrJwt(requestObject);
            return AuthorizationResponse.fromAuthorizationRequest(authorizationRequest, responseOpts, verifyOpts);
        });
    }
    static fromPayload(authorizationResponsePayload, responseOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!authorizationResponsePayload) {
                throw new Error(types_1.SIOPErrors.NO_RESPONSE);
            }
            if (responseOpts) {
                (0, Opts_2.assertValidResponseOpts)(responseOpts);
            }
            const idToken = yield id_token_1.IDToken.fromIDToken(authorizationResponsePayload.id_token);
            return new AuthorizationResponse({ authorizationResponsePayload, idToken, responseOpts });
        });
    }
    static fromAuthorizationRequest(authorizationRequest, responseOpts, verifyOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, Opts_2.assertValidResponseOpts)(responseOpts);
            if (!authorizationRequest) {
                throw new Error(types_1.SIOPErrors.NO_REQUEST);
            }
            const verifiedRequest = yield authorizationRequest.verify(verifyOpts);
            return yield AuthorizationResponse.fromVerifiedAuthorizationRequest(verifiedRequest, responseOpts, verifyOpts);
        });
    }
    static fromVerifiedAuthorizationRequest(verifiedAuthorizationRequest, responseOpts, verifyOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, Opts_2.assertValidResponseOpts)(responseOpts);
            if (!verifiedAuthorizationRequest) {
                throw new Error(types_1.SIOPErrors.NO_REQUEST);
            }
            const authorizationRequest = verifiedAuthorizationRequest.authorizationRequest;
            // const merged = verifiedAuthorizationRequest.authorizationRequest.requestObject, verifiedAuthorizationRequest.requestObject);
            // const presentationDefinitions = await PresentationExchange.findValidPresentationDefinitions(merged, await authorizationRequest.getSupportedVersion());
            const presentationDefinitions = JSON.parse(JSON.stringify(verifiedAuthorizationRequest.presentationDefinitions));
            const wantsIdToken = yield authorizationRequest.containsResponseType(types_1.ResponseType.ID_TOKEN);
            // const hasVpToken = await authorizationRequest.containsResponseType(ResponseType.VP_TOKEN);
            const idToken = wantsIdToken ? yield id_token_1.IDToken.fromVerifiedAuthorizationRequest(verifiedAuthorizationRequest, responseOpts) : undefined;
            const idTokenPayload = wantsIdToken ? yield idToken.payload() : undefined;
            const authorizationResponsePayload = yield (0, Payload_1.createResponsePayload)(authorizationRequest, responseOpts, idTokenPayload);
            const response = new AuthorizationResponse({
                authorizationResponsePayload,
                idToken,
                responseOpts,
                authorizationRequest,
            });
            const wrappedPresentations = yield (0, OpenID4VP_1.extractPresentationsFromAuthorizationResponse)(response);
            yield (0, OpenID4VP_1.assertValidVerifiablePresentations)({
                presentationDefinitions,
                presentations: wrappedPresentations,
                verificationCallback: verifyOpts.verification.presentationVerificationCallback,
                opts: Object.assign({}, responseOpts.presentationExchange),
            });
            return response;
        });
    }
    verify(verifyOpts) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // Merge payloads checks for inconsistencies in properties which are present in both the auth request and request object
            const merged = yield this.mergedPayloads(true);
            if (verifyOpts.state && merged.state !== verifyOpts.state) {
                throw Error(types_1.SIOPErrors.BAD_STATE);
            }
            const verifiedIdToken = yield ((_a = this.idToken) === null || _a === void 0 ? void 0 : _a.verify(verifyOpts));
            const oid4vp = yield (0, OpenID4VP_1.verifyPresentations)(this, verifyOpts);
            return Object.assign(Object.assign({ authorizationResponse: this, verifyOpts, correlationId: verifyOpts.correlationId }, (this.idToken ? { idToken: verifiedIdToken } : {})), (oid4vp ? { oid4vpSubmission: oid4vp } : {}));
        });
    }
    get authorizationRequest() {
        return this._authorizationRequest;
    }
    get payload() {
        return this._payload;
    }
    get options() {
        return this._options;
    }
    get idToken() {
        return this._idToken;
    }
    getMergedProperty(key, consistencyCheck) {
        return __awaiter(this, void 0, void 0, function* () {
            const merged = yield this.mergedPayloads(consistencyCheck);
            return merged[key];
        });
    }
    mergedPayloads(consistencyCheck) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const idTokenPayload = yield ((_a = this.idToken) === null || _a === void 0 ? void 0 : _a.payload());
            if (consistencyCheck !== false && idTokenPayload) {
                Object.entries(idTokenPayload).forEach((entry) => {
                    if (typeof entry[0] === 'string' && this.payload[entry[0]] && this.payload[entry[0]] !== entry[1]) {
                        throw Error(`Mismatch in Authorization Request and Request object value for ${entry[0]}`);
                    }
                });
            }
            return Object.assign(Object.assign({}, this.payload), idTokenPayload);
        });
    }
}
exports.AuthorizationResponse = AuthorizationResponse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aG9yaXphdGlvblJlc3BvbnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F1dGhvcml6YXRpb24tcmVzcG9uc2UvQXV0aG9yaXphdGlvblJlc3BvbnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLG9FQUFnRztBQUNoRyx3REFBMEY7QUFDMUYsMENBQXNDO0FBQ3RDLG9DQUErSTtBQUUvSSwyQ0FBcUk7QUFDckksaUNBQWlEO0FBQ2pELHVDQUFrRDtBQUdsRCxNQUFhLHFCQUFxQjtJQVFoQyxZQUFZLEVBQ1YsNEJBQTRCLEVBQzVCLE9BQU8sRUFDUCxZQUFZLEVBQ1osb0JBQW9CLEdBTXJCO1FBQ0MsSUFBSSxDQUFDLHFCQUFxQixHQUFHLG9CQUFvQixDQUFDO1FBQ2xELElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQUcsNEJBQTRCLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBTyxpQkFBaUIsQ0FDNUIsYUFBcUIsRUFDckIsWUFBdUMsRUFDdkMsVUFBMEM7O1lBRTFDLElBQUEsZ0RBQXlDLEVBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEQsSUFBQSw4QkFBdUIsRUFBQyxZQUFZLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDckQsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3BDO1lBQ0QsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLDRDQUFvQixDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNwRixPQUFPLHFCQUFxQixDQUFDLHdCQUF3QixDQUFDLG9CQUFvQixFQUFFLFlBQVksRUFBRSxVQUFV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