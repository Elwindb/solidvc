"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IDToken = void 0;
const Opts_1 = require("../authorization-response/Opts");
const did_1 = require("../did");
const types_1 = require("../types");
const Payload_1 = require("./Payload");
class IDToken {
    constructor(jwt, payload, responseOpts) {
        this._jwt = jwt;
        this._payload = payload;
        this._responseOpts = responseOpts;
    }
    static fromVerifiedAuthorizationRequest(verifiedAuthorizationRequest, responseOpts, verifyOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            const authorizationRequestPayload = verifiedAuthorizationRequest.authorizationRequestPayload;
            if (!authorizationRequestPayload) {
                throw new Error(types_1.SIOPErrors.NO_REQUEST);
            }
            const idToken = new IDToken(null, yield (0, Payload_1.createIDTokenPayload)(verifiedAuthorizationRequest, responseOpts), responseOpts);
            if (verifyOpts) {
                yield idToken.verify(verifyOpts);
            }
            return idToken;
        });
    }
    static fromIDToken(idTokenJwt, verifyOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!idTokenJwt) {
                throw new Error(types_1.SIOPErrors.NO_JWT);
            }
            const idToken = new IDToken(idTokenJwt, undefined);
            if (verifyOpts) {
                yield idToken.verify(verifyOpts);
            }
            return idToken;
        });
    }
    static fromIDTokenPayload(idTokenPayload, responseOpts, verifyOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!idTokenPayload) {
                throw new Error(types_1.SIOPErrors.NO_JWT);
            }
            const idToken = new IDToken(null, idTokenPayload, responseOpts);
            if (verifyOpts) {
                yield idToken.verify(verifyOpts);
            }
            return idToken;
        });
    }
    payload() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._payload) {
                if (!this._jwt) {
                    throw new Error(types_1.SIOPErrors.NO_JWT);
                }
                const { header, payload } = this.parseAndVerifyJwt();
                this._header = header;
                this._payload = payload;
            }
            return this._payload;
        });
    }
    jwt() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._jwt) {
                if (!this.responseOpts) {
                    throw Error(types_1.SIOPErrors.BAD_SIGNATURE_PARAMS);
                }
                this._jwt = yield (0, did_1.signIDTokenPayload)(this._payload, this.responseOpts);
                const { header, payload } = this.parseAndVerifyJwt();
                this._header = header;
                this._payload = payload;
            }
            return this._jwt;
        });
    }
    parseAndVerifyJwt() {
        const { header, payload } = (0, did_1.parseJWT)(this._jwt);
        this.assertValidResponseJWT({ header, payload });
        const idTokenPayload = payload;
        return { header, payload: idTokenPayload };
    }
    /**
     * Verifies a SIOP ID Response JWT on the RP Side
     *
     * @param idToken ID token to be validated
     * @param verifyOpts
     */
    verify(verifyOpts) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            (0, Opts_1.assertValidVerifyOpts)(verifyOpts);
            const { header, payload } = (0, did_1.parseJWT)(yield this.jwt());
            this.assertValidResponseJWT({ header, payload });
            const verifiedJWT = yield (0, did_1.verifyDidJWT)(yield this.jwt(), (0, did_1.getResolver)(verifyOpts.verification.resolveOpts), Object.assign(Object.assign({}, (_a = verifyOpts.verification.resolveOpts) === null || _a === void 0 ? void 0 : _a.jwtVerifyOpts), { audience: (_b = verifyOpts.audience) !== null && _b !== void 0 ? _b : (_d = (_c = verifyOpts.verification.resolveOpts) === null || _c === void 0 ? void 0 : _c.jwtVerifyOpts) === null || _d === void 0 ? void 0 : _d.audience }));
            const issuerDid = (0, did_1.getSubDidFromPayload)(payload);
            if (verifyOpts.verification.checkLinkedDomain && verifyOpts.verification.checkLinkedDomain !== types_1.CheckLinkedDomain.NEVER) {
                yield (0, did_1.validateLinkedDomainWithDid)(issuerDid, verifyOpts.verification);
            }
            else if (!verifyOpts.verification.checkLinkedDomain) {
                yield (0, did_1.validateLinkedDomainWithDid)(issuerDid, verifyOpts.verification);
            }
            const verPayload = verifiedJWT.payload;
            this.assertValidResponseJWT({ header, verPayload: verPayload, audience: verifyOpts.audience });
            // Enforces verifyPresentationCallback function on the RP side,
            if (!(verifyOpts === null || verifyOpts === void 0 ? void 0 : verifyOpts.verification.presentationVerificationCallback)) {
                throw new Error(types_1.SIOPErrors.VERIFIABLE_PRESENTATION_VERIFICATION_FUNCTION_MISSING);
            }
            return {
                jwt: yield this.jwt(),
                didResolutionResult: verifiedJWT.didResolutionResult,
                signer: verifiedJWT.signer,
                issuer: issuerDid,
                payload: Object.assign({}, verPayload),
                verifyOpts,
            };
        });
    }
    static verify(idTokenJwt, verifyOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            const idToken = yield IDToken.fromIDToken(idTokenJwt, verifyOpts);
            const verifiedIdToken = yield idToken.verify(verifyOpts);
            return Object.assign({}, verifiedIdToken);
        });
    }
    assertValidResponseJWT(opts) {
        if (!opts.header) {
            throw new Error(types_1.SIOPErrors.BAD_PARAMS);
        }
        if (opts.payload) {
            if (!opts.payload.iss || !(opts.payload.iss.includes(types_1.ResponseIss.SELF_ISSUED_V2) || opts.payload.iss.startsWith('did:'))) {
                throw new Error(`${types_1.SIOPErrors.NO_SELFISSUED_ISS}, got: ${opts.payload.iss}`);
            }
        }
        if (opts.verPayload) {
            if (!opts.verPayload.nonce) {
                throw Error(types_1.SIOPErrors.NO_NONCE);
                // No need for our own expiration check. DID jwt already does that
                /*} else if (!opts.verPayload.exp || opts.verPayload.exp < Date.now() / 1000) {
                throw Error(SIOPErrors.EXPIRED);
                /!*} else if (!opts.verPayload.iat || opts.verPayload.iat > (Date.now() / 1000)) {
                                  throw Error(SIOPErrors.EXPIRED);*!/
                // todo: Add iat check
        
               */
            }
            if ((opts.verPayload.aud && !opts.audience) || (!opts.verPayload.aud && opts.audience)) {
                throw Error(types_1.SIOPErrors.NO_AUDIENCE);
            }
            else if (opts.audience && opts.audience != opts.verPayload.aud) {
                throw Error(types_1.SIOPErrors.INVALID_AUDIENCE);
            }
            else if (opts.nonce && opts.nonce != opts.verPayload.nonce) {
                throw Error(types_1.SIOPErrors.BAD_NONCE);
            }
        }
    }
    get header() {
        return this._header;
    }
    get responseOpts() {
        return this._responseOpts;
    }
    isSelfIssued() {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = yield this.payload();
            return payload.iss === types_1.ResponseIss.SELF_ISSUED_V2 || (payload.sub !== undefined && payload.sub === payload.iss);
        });
    }
}
exports.IDToken = IDToken;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSURUb2tlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pZC10b2tlbi9JRFRva2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUdBLHlEQUF1RTtBQUN2RSxnQ0FBb0k7QUFDcEksb0NBU2tCO0FBRWxCLHVDQUFpRDtBQUVqRCxNQUFhLE9BQU87SUFNbEIsWUFBb0IsR0FBZ0IsRUFBRSxPQUF3QixFQUFFLFlBQXdDO1FBQ3RHLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDO0lBQ3BDLENBQUM7SUFFTSxNQUFNLENBQU8sZ0NBQWdDLENBQ2xELDRCQUEwRCxFQUMxRCxZQUF1QyxFQUN2QyxVQUE0Qzs7WUFFNUMsTUFBTSwyQkFBMkIsR0FBRyw0QkFBNEIsQ0FBQywyQkFBMkIsQ0FBQztZQUM3RixJQUFJLENBQUMsMkJBQTJCLEVBQUU7Z0JBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUN4QztZQUNELE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLElBQUEsOEJBQW9CLEVBQUMsNEJBQTRCLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDeEgsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ2xDO1lBQ0QsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQztLQUFBO0lBRU0sTUFBTSxDQUFPLFdBQVcsQ0FBQyxVQUFzQixFQUFFLFVBQTRDOztZQUNsRyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNwQztZQUNELE1B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